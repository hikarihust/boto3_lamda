https://boto3.amazonaws.com/v1/documentation/api/latest/index.html#
Boto3
    IAM - > Add user 
        boto3-demo
        Access type: Programmatic access
        Enables an access key ID and secret access key for the AWS API, CLI, SDK, and other development tools.
        Attach existing policies directly
            AdministratorAccess
    aws cli(Using Python and pip on Windows)
        pip install awscli
        aws configure

Create EC2 Instances
    Docs Available Services AccessAnalyzer
    https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/accessanalyzer.html#client
    boto3 ec2 instance
    ami-0e38b48473ea57778

Launching EC2 Instances

Operations on EC2 (Start, Stop, Terminate)
    boto3 ec2 instance
    start_instances()

Describing EC2 Instances

Applying Filters while describing EC2
    instance-state-name - The state of the instance (pending | running | shutting-down | terminated | stopping | stopped ).
    tag :<key> - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the 
        tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA , 
        specify tag:Owner for the filter name and TeamA for the filter value.

Boto3 Collections
    Docs User Guides Collections
    https://boto3.amazonaws.com/v1/documentation/api/latest/guide/collections.html

Taking EBS Snapshots & Send Email 
    Volume 
    Snapshot
    sns
        Topics -> Create topic(Name: snapshots, Display name: JavaHome)
        Create subscription
            Protocol: Email
            Endpoint: xxxxx.gmail.com
            Comfirm mail

Deleting EBS Snapshots, older than N days

Migrating AMIs To  different regions using Boto3 Waiters

Demo - Create Lambda Function
    Services - Lamda - Create function - Author from scratch
    Function name
    Runtime: Python
    Choose or create an execution role: Create a new role with basic Lambda permissions
    Create function
    Test
    Event name: helloworld
    Create
    configure test event
        {
            "name": "quang"
        }

AWS Lambda - Performance Tuning, Managing Memory, CPU & running Lambda in VPC
    Basic settings
        TimeoutInfo: 5 minute, 0 second
    Memory (MB): 128MB
    VPC

AWS Lambda - Managing Lambda Versions
    LambdaVersionsingDemo - Save 
    CloudWatch - Rules - Create rule
    Step 1: Create rule
        Schedule: Fixed rate of 1 minute
        Add target
            Lambda function
            Function: LambdaVersionsingDemo
    Step 2: Configure rule details
    Logs

    Lambda
        Publish new version: RELEASE-1
    CloudWatch - Edit
        Configure version/alias - Versions 1

AWS Lambda - Managing Aliases
    Lamda
        Publish Versions 2
        Actions: Create alias
        Name: Prod 
        Desciption: Production Env
        Version: 1
    CloudWatch
        Edit VersionsingDemo
        Alias: Prod
    Có thể sửa alias từ version 1 sang version 2

Lambda, Create Deployment Package And Send Slack Notifications
    Services - Key Management Service (KMS)
    https://docs.aws.amazon.com/lambda/latest/dg/python-package.html
    https://slack.com/signin
    Create a new workspace
    Enter Email
    Company name: Hust 
    Team name: Software Engineer
    Who do you email most about this project?
        my mail
    Add More App - Incoming WebHooks - Add to Slack - Choose a channel
    Webhook URL: https://hooks.slack.com/services/.....
    
    EC2: Lauch SlackDemo Instances

    Create a deployment package with virtualenv
        virtualenv v-env
    .\v-env\Scripts\activate 
        result: 
            v-env
                Include
                Lib
                Scripts
                tcl
    pip install requests
        Check in Lib\site-packages -> requests được thêm vào
    v-env\Lib\site-packages
        Thêm slackAlert.py(function send_lack)
    -> zip toàn bộ nội dung có ở trong thư mục v-env\Lib\site-packages -> thu được slack.zip
    
    Lambda
        Name: slackAlert
        Upload a zip filter
        HandlerInfo: slackAlert.send_lack

    CloudWatch - Rules - Create rule - Event Pattern
        Step 1: Create rule
            Service Name: EC2
            Event Type: EC2 Instance State-change Notification
            Specific state(s): stopped
            Specific instance Id(s): id of EC2

            Targets - Lamda function
                Function: slackAlert
        Step 2: Configure rule details
            Name: slackAlert

AWS Lambda - Passing Environment Variables To Lambda Function Using python
    Lamda - Upload zip file - Save
    Environment variables - SLACK_WEBHOOK(Key, Value)

AWS Lambda - Encrypting Sensitive Data In Environment Variables
    boto3 kms
    https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/kms.html#KMS.Client.decrypt
    https://docs.aws.amazon.com/kms/latest/APIReference/API_Decrypt.html
    create aws kms key
        https://console.aws.amazon.com/kms
        Alias: slack-demo
        Description - optional: slack-demo
        Create key
        Define key administrative permissions: next(everybody)
        Define key usage permissions
            slackAlert-role-22pnk3xs(name: slackAlert-role-22pnk3xs)
    boto3 kms
    Lambda - Functions - slackAlert
        Environment variables - Encryption configuration
            Enable helpers for encryption in transit
            Use a customer master key
        Customer master key(slack-demo)
        Encryption in transit

When JSON File Uploaded to S3, Automatically Process File And Put It it in DynamoDB
    Services DynamoDB - Create table
        Table name: employees
        Primary key: emp_id
    Services S3 - Create bucket
        bucket: employees-json
    Services IAM - Policies - Create policy
        Choose a service: CloudWatch Logs
        Actions: All CloudWatch Logs action
        Resources: All resources
        Add additional permissions
            Choose services: S3
            Action: All S3 actions
            Resources: All resources
        Add additional permissions
            Choose services: dynamoDB
            Action: All DynamoDB actions (dynamodb:*)
        There are action in your policy that support the stream resources type: All resources
        Review policy
            Name: s3_json_dynamodb
    Services IAM - Roles - Create role
        AWS services - Lamda
        s3_json_dynamodb
        Role name: s3_json_dynamodb
        Role Desciption: Allows Lamda functions to all AWS services on your behalf
    Lamda
        Name: s3_json_dynamodb
        Role - Use an existing role: s3_json_dynamodb
        s3_json_dynamodb.py
            print(str(event))
        Add Trigger
            S3
            bucket: employees-json
            Event type: All object create events
            Suffix: .json
    S3 
        employees-json: Upload data.json 
    CloudWatch - Logs - Group logs
        http://jsonviewer.stack.hu/
        bucket: employees-json
        key: data.json
    boto3 s3 documentation
        https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/s3.html
    boto dynamodb
        https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/dynamodb.html

Read CSV from S3 and Persist to DynamoDB
    Services -  DynamoDB Create Table
        Table Name: employees
        Primary key: id
    Services IAM - Policies - Create policy
        Choose a service: CloudWatch Logs
        Actions: All CloudWatch Logs action
        Resources: All resources
        Add additional permissions
            Choose services: S3
            Action: All S3 actions
            Resources: All resources
        Add additional permissions
            Choose services: dynamoDB
            Action: All DynamoDB actions (dynamodb:*)
        There are action in your policy that support the stream resources type: All resources
        Review policy
            Name: s3_csv_dynamodb
    Services IAM - Roles - Create role
        AWS services - Lamda
        s3_csv_dynamodb
        Role name: s3_csv_dynamodb
        Role Desciption: Allows Lamda functions to all AWS services on your behalf
    Lambda - Functions - Create function
        Function name: s3_csv_dynamodb
    aws lambda s3 event
        https://docs.aws.amazon.com/ja_jp/lambda/latest/dg/with-s3.html
    s3 - Create Bucket: hari-javahome123456
    Test
        Event template: Amazon S3 Put
        Event name: csv
        Records - s3 - bucket - name:
            hari-javahome123456
        Records - s3 - object - key:
            employees.csv
    s3 - Create Bucket: javahome-csv-demo-123
        S3/javahome-csv-demo-123
        Properties - Events - Add notification
        Name: csv_upload
        Events: All object create events
        Suffix: .csv
        Send to: Lambda Function
        Lambda: s3_csv_dynamodb
    Data cs3:
        1,Hari,Banglore
        2,Kashvi,Pune
        3,Heshvi,Delhi
        4,Pavithra,Banglore
        5,Ravi,Pune
        6,Raghu,Delhi

AWS Lambda - Run EC2 Instances In Schedules
    Requirement:
        Schedule ec2 instances, start instance at 9AM and stop them at 6 PM.
        Condition: Instances with tag key="Type" and Value="Scheduled"
        Condition: Mod-Friday
    1. IAM Role for the lambda -> EC2 instance, AWS CloudWatch Logs
        IAM - Policies - Create policy
            EC2: StartInstances, StopInstances
            Policies name: start_stop_ec2_instances
        IAM - Roles - Create role(AWS service) - Lambda
            Permissions policies: start_stop_ec2_instances
            Role name: Role start_stop_ec2_instances_role
        Policies - start_stop_ec2_instances - Edit policy
            Add additional permissions - CloudWatch Logs - All CloudWatch Logs actions (logs:*)
    2. Create Lamda function
        Lambda - Create function(Author from scratch)
        Function name: schedule_ec2_instances
        Use an existing role: start_stop_ec2_instances_role
    boto3 ec2 filter
    Test(Create)
        Event name: scheduledtestdata
        "errorMessage": "An error occurred (UnauthorizedOperation) when calling the DescribeInstances operation: You are not 
            authorized to perform this operation.",
        -> IAM - Policies - start_stop_ec2_instances - Edit policy - EC2 - Actions
            Thêm DescribeInstances  
    3. Schedule this lambda function
        CloudWatch - Events - Rules - Create rule - Schedule
            Cron expression: 0 9 ? * MON-FRI *
            JST to GMT
        Target - Lambda function
            Function: schedule_ec2_instances
        Configure rule details
            Name: schedule_ec2_instances

Realtime Use Case - Remove Unused AMIs
    
AWS Lambda, Send Email Notifications When EC2 Instance Stop
    1. EC2
    2. SNS Topic 
        sns(Amazon SNS)
        Create topic
            Name: prod-alerts
            Display name: prodalert
        Create subscription
            Protocol: Email
            Endpoint: ...@gmail
        Confirm subscription
    3. IAM Role for Lambda to access SNS topic and CloudWatch Logs
        IAM - Policies - Create Policy
            Services: SNS
                Resources: All resources
            Services: CloudWatch Logs
                Action: All CloudWatch Logs actions (logs:*)
                Resources: All resources
            Name: sns_cloudwatch_logs_prod_alerts
        IAM - Roles - Create role - AWS service - Lambda
            sns_cloudwatch_logs_prod_alerts
            Role name: sns_cloudwatch_logs_prod_alerts
    4. Lambda(python) 
        Lambda - Create function - Author from scratch
            name: prod_alerts
            Use an existing role: sns_cloudwatch_logs_prod_alerts
        boto3 sns
    5. CloudWatch Events - to schedule 
        Add trigger
        Select a trigger: CloudWatch Events
        Rule: Create a new rule
        Rule name: prod_alerts
        Rule type: Event pattern
        Auto Scaling: EC2
        Events: EC2 instance state-change notification
        Detail: 
            State: stopped
            Instances - Add Instance ID

Dynamo DB, Put Item
    boto3 dynamodb

DynamoDB Get and Delete Item

Create S3 Bucket

Upload File to S3 Bucket

Delete Objects From S3

List Objects From S3